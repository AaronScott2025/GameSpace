name: CI/CD Deployment to EC2

on:
  pull_request:
    branches: DeploymentStage

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Set up Node.js for building the frontend locally
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'  

      # Install and build the React frontend locally on the Actions runner
      - name: Build Frontend
        run: |
          cd frontend
          npm install
          npm run build
          echo "Frontend build complete!"

      # Transfer the frontend build artifacts to EC2 instance
      - name: Deploy Frontend Build to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "frontend/build/"
          target: "~/GameSpace/frontend/build/"

      # Continue with the backend deployment on EC2
      - name: Deploy Backend and Restart Services on EC2
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # Navigate to your repository's location and update the codebase
            cd ~/GameSpace
            git fetch origin main
            git reset --hard origin/main

            echo "Deploying Flask Backend using Gunicorn..."
            cd GameSpaceBackend
            if [ ! -d "venv" ]; then
              python3 -m venv venv
            fi
            source venv/bin/activate
            pip install --upgrade pip
            pip install --break-system-packages -r requirements.txt
            sudo systemctl daemon-reload
            sudo systemctl restart gunicorn

            # Reload nginx so that it picks up the new frontend files
            sudo systemctl daemon-reload
            sudo systemctl reload nginx

            echo "Deployment Complete!"
